[{"path":"https://jonocarroll.github.io/charcuterie/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 charcuterie authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonocarroll.github.io/charcuterie/articles/use_cases.html","id":"test-membership","dir":"Articles","previous_headings":"","what":"Test Membership","title":"Use Cases","text":"letters vowels (aeiou)? Since %% vectorised, works nicely chars object","code":"vowels <- function(word) {   ch <- chars(word)   setNames(ch %in% chars(\"aeiou\"), ch) } vowels(\"string\") #>     s     t     r     i     n     g  #> FALSE FALSE FALSE  TRUE FALSE FALSE vowels(\"banana\") #>     b     a     n     a     n     a  #> FALSE  TRUE FALSE  TRUE FALSE  TRUE banana <- chars(\"banana\") banana[which(banana %in% chars(\"aeiou\"))] #> [1] \"aaa\"  onomatopoeia <- chars(\"onomatopoeia\") onomatopoeia[which(onomatopoeia %in% chars(\"aeiou\"))] #> [1] \"ooaooeia\""},{"path":"https://jonocarroll.github.io/charcuterie/articles/use_cases.html","id":"iterate","dir":"Articles","previous_headings":"","what":"Iterate","title":"Use Cases","text":"“Strings” finally iterable","code":"for (x in chars(\"ABC\")) {   print(paste(\"Appendix\", x)) } #> [1] \"Appendix A\" #> [1] \"Appendix B\" #> [1] \"Appendix C\""},{"path":"https://jonocarroll.github.io/charcuterie/articles/use_cases.html","id":"identify-palindromes","dir":"Articles","previous_headings":"","what":"Identify Palindromes","title":"Use Cases","text":"word palindrome (spelled forwards backwards)?","code":"palindrome <- function(a, ignore_spaces = FALSE) {   a <- chars(a)   if (ignore_spaces) a <- except(a, \" \")   all(rev(a) == a) } palindrome(\"palindrome\") #> [1] FALSE palindrome(\"racecar\") #> [1] TRUE palindrome(\"never odd or even\", ignore_spaces = TRUE) #> [1] TRUE palindrome(\"go hang a salami im a lasagna hog\", ignore_spaces = TRUE) #> [1] TRUE"},{"path":"https://jonocarroll.github.io/charcuterie/articles/use_cases.html","id":"find-anagrams","dir":"Articles","previous_headings":"","what":"Find Anagrams","title":"Use Cases","text":"two words just rearrangements letters?","code":"anagram <- function(a, b) {   is_anagram <- function(a, b) {     length(a) == length(b) && all(sort(a) == sort(b))   }   sapply(candidates, \\(x) is_anagram(chars(a), chars(x))) } target <- \"stressed\" candidates <- c(\"started\", \"desserts\", \"rested\") anagram(target, candidates) #>  started desserts   rested  #>    FALSE     TRUE    FALSE"},{"path":"https://jonocarroll.github.io/charcuterie/articles/use_cases.html","id":"spongebob-case","dir":"Articles","previous_headings":"","what":"Spongebob Case","title":"Use Cases","text":"Make every second letter uppercase","code":"spongebob <- function(phrase) {   x <- chars(phrase)   odds <- seq(1, length(x), 2)   x[odds] <- toupper(x[odds])   string(x) } spongebob(\"you can't do anything useful with this package\") #> [1] \"YoU CaN'T Do aNyThInG UsEfUl wItH ThIs pAcKaGe\""},{"path":"https://jonocarroll.github.io/charcuterie/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Carroll. Author, maintainer.","code":""},{"path":"https://jonocarroll.github.io/charcuterie/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carroll J (2024). charcuterie: Handle Strings Vectors Characters. R package version 0.0.1, https://jonocarroll.github.io/charcuterie/, https://github.com/jonocarroll/charcuterie.","code":"@Manual{,   title = {charcuterie: Handle Strings as Vectors of Characters},   author = {Jonathan Carroll},   year = {2024},   note = {R package version 0.0.1, https://jonocarroll.github.io/charcuterie/},   url = {https://github.com/jonocarroll/charcuterie}, }"},{"path":"https://jonocarroll.github.io/charcuterie/index.html","id":"charcuterie-","dir":"","previous_headings":"","what":"Handle Strings as Vectors of Characters","title":"Handle Strings as Vectors of Characters","text":"goal {charcuterie} finally strings iterable character vectors.","code":""},{"path":"https://jonocarroll.github.io/charcuterie/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Handle Strings as Vectors of Characters","text":"can install development version {charcuterie} like :","code":"# install.packages(\"remotes\") remotes::install_github(\"jonocarroll/charcuterie\")"},{"path":"https://jonocarroll.github.io/charcuterie/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Handle Strings as Vectors of Characters","text":"See blog post: https://jcarroll.com.au/2024/08/03/charcuterie---strings--iterable--r/ programming languages seem treat string array characters, R, “string” object type “character” length 1. number ‘characters’ string obtained via nchar(x) otherwise, individual ‘characters’ comprising string rarely exposed. common route around limitation split string smaller strings, containing single character, .e. produces list strings, single character. cumbersome type , package offers cleaner approach () looks like nothing, ’s point - still looks like “string”. ’s actually vector, though","code":"strsplit(\"string\", split = \"\") #> [[1]] #> [1] \"s\" \"t\" \"r\" \"i\" \"n\" \"g\" library(charcuterie) #>  #> Attaching package: 'charcuterie' #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, union s <- chars(\"string\") s #> [1] \"string\" unclass(s) #> [1] \"s\" \"t\" \"r\" \"i\" \"n\" \"g\""},{"path":"https://jonocarroll.github.io/charcuterie/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Handle Strings as Vectors of Characters","text":"means can finally vector things , like reverse sort index {charcuterie} defines S3 methods functions wide range operations performed string built vector characters index [ concatenate c print format print slice head tail reverse rev sort sort set operations setdiff, union, intersect, new except leverage existing vectorised operations like unique, toupper, tolower detailed usage examples, see vignettes.","code":"rev(s) #> [1] \"gnirts\" sort(s) #> [1] \"ginrst\" s[3] #> [1] \"r\""},{"path":"https://jonocarroll.github.io/charcuterie/reference/charcuterie-package.html","id":null,"dir":"Reference","previous_headings":"","what":"charcuterie: Handle Strings as Vectors of Characters — charcuterie-package","title":"charcuterie: Handle Strings as Vectors of Characters — charcuterie-package","text":"Creates new chars class looks like string actually vector single characters.","code":""},{"path":[]},{"path":"https://jonocarroll.github.io/charcuterie/reference/charcuterie-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"charcuterie: Handle Strings as Vectors of Characters — charcuterie-package","text":"Maintainer: Jonathan Carroll rpkg@jcarroll.com.au (ORCID)","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chars object from a string — chars.character","title":"Create a chars object from a string — chars.character","text":"Create chars object string","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chars object from a string — chars.character","text":"","code":"# S3 method for class 'character' chars(x, ...)"},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chars object from a string — chars.character","text":"x string convert chars object (length 1 ) ... unused","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a chars object from a string — chars.character","text":"chars expects single string input. create list , consider lapply(strings, chars)","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to chars — chars.default","title":"Convert an object to chars — chars.default","text":"Convert object chars","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to chars — chars.default","text":"","code":"# Default S3 method chars(x, ...)"},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to chars — chars.default","text":"x object convert ... options","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a chars object — chars","title":"Create a chars object — chars","text":"Create chars object","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a chars object — chars","text":"","code":"chars(x, ...)"},{"path":"https://jonocarroll.github.io/charcuterie/reference/chars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a chars object — chars","text":"x object convert ... options","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/except.html","id":null,"dir":"Reference","previous_headings":"","what":"Elements of x except those in y — except","title":"Elements of x except those in y — except","text":"treat operation set","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/except.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elements of x except those in y — except","text":"","code":"except(x, y)"},{"path":"https://jonocarroll.github.io/charcuterie/reference/except.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elements of x except those in y — except","text":"x larger vector y smaller vector","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/except.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elements of x except those in y — except","text":"","code":"except(c(1:5), 3) #> [1] 1 2 4 5 except(chars(\"abcde\"), \"c\") #> [1] \"abde\" except(chars(\"abracadabra\"), \"b\") #> [1] \"aracadara\""},{"path":"https://jonocarroll.github.io/charcuterie/reference/methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Operations — setdiff","title":"Set Operations — setdiff","text":"Set Operations Set Operations Set Operations","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Operations — setdiff","text":"","code":"setdiff(x, y)  union(x, y)  intersect(x, y)"},{"path":"https://jonocarroll.github.io/charcuterie/reference/methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Operations — setdiff","text":"x vector y vector","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/string.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a string from a chars object — string","title":"Create a string from a chars object — string","text":"Create string chars object","code":""},{"path":"https://jonocarroll.github.io/charcuterie/reference/string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a string from a chars object — string","text":"","code":"string(..., collapse = \"\")"},{"path":"https://jonocarroll.github.io/charcuterie/reference/string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a string from a chars object — string","text":"... one R objects, converted character vectors. collapse optional character string separate results.      NA_character_.  collapse string,     result always string (character length 1).","code":""},{"path":"https://jonocarroll.github.io/charcuterie/news/index.html","id":"charcuterie-001","dir":"Changelog","previous_headings":"","what":"charcuterie 0.0.1","title":"charcuterie 0.0.1","text":"refactored internals - thanks @barryrowlingson","code":""},{"path":"https://jonocarroll.github.io/charcuterie/news/index.html","id":"charcuterie-0009000","dir":"Changelog","previous_headings":"","what":"charcuterie 0.0.0.9000","title":"charcuterie 0.0.0.9000","text":"Initial version","code":""}]
